version: '3'

vars:
  PACKAGE_NAME: qasmparser
  ANTLR_VERSION: 4.13.1

tasks:
  setup:
    desc: Setup development environment
    cmds:
      - go mod download
      - task: install-antlr
      - task: generate

  install-antlr:
    desc: Install ANTLR4 tool (version 4.13.2)
    cmds:
      - |
        if ! command -v antlr4 &> /dev/null; then
          echo "Installing ANTLR4 version 4.13.2..."
          if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS - use homebrew first, fallback to manual install
            if command -v brew &> /dev/null; then
              brew install antlr
            else
              echo "Manual ANTLR installation for macOS..."
              curl -O https://www.antlr.org/download/antlr-4.13.2-complete.jar
              sudo mkdir -p /usr/local/lib
              sudo mv antlr-4.13.2-complete.jar /usr/local/lib/
              echo '#!/bin/bash' | sudo tee /usr/local/bin/antlr4
              echo 'java -jar /usr/local/lib/antlr-4.13.2-complete.jar "$@"' | sudo tee -a /usr/local/bin/antlr4
              sudo chmod +x /usr/local/bin/antlr4
            fi
          elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
            # Linux - manual install for consistency
            echo "Manual ANTLR installation for Linux..."
            wget https://www.antlr.org/download/antlr-4.13.2-complete.jar
            sudo mkdir -p /usr/local/lib
            sudo mv antlr-4.13.2-complete.jar /usr/local/lib/
            echo '#!/bin/bash' | sudo tee /usr/local/bin/antlr4
            echo 'java -jar /usr/local/lib/antlr-4.13.2-complete.jar "$@"' | sudo tee -a /usr/local/bin/antlr4
            sudo chmod +x /usr/local/bin/antlr4
          else
            echo "Please install ANTLR4 manually for your platform"
            echo "Download: https://www.antlr.org/download/antlr-4.13.2-complete.jar"
            exit 1
          fi
        else
          echo "ANTLR4 is already installed"
        fi
        antlr4 -version || echo "ANTLR4 version check failed"

  generate:
    desc: Generate ANTLR parser code
    cmds:
      - rm -rf gen/parser
      - mkdir -p gen/parser
      - cp grammar/*.g4 gen/parser/
      - cd gen/parser && antlr4 -Dlanguage=Go -package parser qasm3Lexer.g4
      - cd gen/parser && antlr4 -Dlanguage=Go -visitor -listener -package parser qasm3Parser.g4
      - rm gen/parser/*.g4
      - task: fix-antlr-imports
      - echo "Generated ANTLR parser files in gen/parser/"

  fix-antlr-imports:
    desc: Fix ANTLR import paths for compatibility
    internal: true
    cmds:
      - |
        # Fix old ANTLR import paths to new ones
        find gen/parser -name "*.go" -type f -exec sed -i.bak 's|github.com/antlr/antlr4/runtime/Go/antlr|github.com/antlr4-go/antlr/v4|g' {} \;
      - |
        # Remove backup files
        find gen/parser -name "*.bak" -delete || true
      - |
        # Verify the fix worked
        if grep -r "github.com/antlr/antlr4/runtime/Go/antlr" gen/parser/ 2>/dev/null; then
          echo "Warning: Old ANTLR import paths still found"
          grep -r "github.com/antlr/antlr4/runtime/Go/antlr" gen/parser/
        else
          echo "âœ“ ANTLR import paths fixed successfully"
        fi

  build:
    desc: Build the package
    deps: [generate]
    cmds:
      - go build ./...


  test:
    desc: Run tests
    deps: [generate]
    cmds:
      - go test -v ./...

  test-coverage:
    desc: Run tests with coverage
    deps: [generate]
    cmds:
      - go test -v -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - 'echo "Coverage report generated: coverage.html"'

  bench:
    desc: Run benchmarks
    deps: [generate]
    cmds:
      - go test -bench=. -benchmem ./...

  fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...
      - |
        if command -v goimports &> /dev/null; then
          find . -name '*.go' ! -path './gen/*' | xargs goimports -w
        else
          echo "goimports not found. Install with: go install golang.org/x/tools/cmd/goimports@latest"
        fi

  fmt:check:
    desc: Check code formatting (CI style)
    cmds:
      - |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go files are not properly formatted:"
          gofmt -s -l .
          echo "Run 'task fmt' to fix formatting issues."
          exit 1
        fi
      - |
        if command -v goimports &> /dev/null; then
          FILES=$(find . -name '*.go' ! -path './gen/*')
          UNFORMATTED=$(echo "$FILES" | xargs goimports -l)
          if [ -n "$UNFORMATTED" ]; then
            echo "Go imports are not properly formatted:"
            echo "$UNFORMATTED"
            echo "Run 'task fmt' to fix import issues."
            exit 1
          fi
        else
          echo "goimports not found, skipping import check"
        fi

  lint:
    desc: Run linters
    deps: [fmt]
    cmds:
      - go vet ./parser ./examples/...
      - |
        if command -v golangci-lint &> /dev/null; then
          golangci-lint run --skip-dirs=gen
        else
          echo "golangci-lint not found, skipping..."
        fi

  clean:
    desc: Clean generated files
    cmds:
      - rm -rf gen/
      - rm -f coverage.out coverage.html

  examples:
    desc: Run example programs
    deps: [generate]
    cmds:
      - |
        if [ -d "examples" ]; then
          for example in examples/*/; do
            if [ -f "$example/main.go" ]; then
              echo "Running example: $example"
              go run "$example/main.go"
            fi
          done
        else
          echo "No examples directory found"
        fi

  copy-testdata:
    desc: Copy test data from qasmfmt
    cmds:
      - mkdir -p testdata
      - cp /Users/orangekame3/src/github.com/orangekame3/qasmfmt/testdata/* testdata/ 2>/dev/null || echo "No testdata to copy"

  validate:
    desc: Validate the package
    deps: [build, test, lint]
    cmds:
      - echo "Package validation complete"

  release-prepare:
    desc: Prepare for release
    deps: [clean, generate, validate, test-coverage]
    cmds:
      - echo "Release preparation complete"

  download-grammar:
    desc: Download official OpenQASM grammar files
    cmds:
      - mkdir -p grammar
      - curl -o grammar/qasm3Lexer.g4 https://raw.githubusercontent.com/openqasm/openqasm/refs/heads/main/source/grammar/qasm3Lexer.g4
      - curl -o grammar/qasm3Parser.g4 https://raw.githubusercontent.com/openqasm/openqasm/refs/heads/main/source/grammar/qasm3Parser.g4
      - echo "Downloaded official OpenQASM grammar files"

  dev:
    desc: Development mode - watch for changes and regenerate
    deps: [generate]
    cmds:
      - |
        if command -v fswatch &> /dev/null; then
          echo "Watching for grammar changes..."
          fswatch -o grammar/ | while read; do
            echo "Grammar files changed, regenerating..."
            task generate
          done
        else
          echo "fswatch not found. Install it for file watching: brew install fswatch"
        fi

  # CI/CD tasks
  deps:verify:
    desc: Verify dependencies (CI style)
    cmds:
      - go mod download
      - go mod verify
      - go mod tidy
      - |
        if ! git diff --exit-code go.mod go.sum; then
          echo "go.mod or go.sum files are not tidy"
          echo "Run 'go mod tidy' to fix module issues."
          exit 1
        fi

  test:race:
    desc: Run tests with race detector
    deps: [generate]
    cmds:
      - go test -race -short ./...

  build:all:
    desc: Build for all platforms
    deps: [generate]
    cmds:
      - echo "Building for multiple platforms..."
      - GOOS=linux GOARCH=amd64 go build ./...
      - GOOS=darwin GOARCH=amd64 go build ./...
      - GOOS=darwin GOARCH=arm64 go build ./...
      - GOOS=windows GOARCH=amd64 go build ./...
      - echo "All platform builds successful"

  security:
    desc: Run security checks
    cmds:
      - |
        if command -v gosec &> /dev/null; then
          gosec ./...
        else
          echo "gosec not found. Install with: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest"
        fi
      - |
        if command -v govulncheck &> /dev/null; then
          govulncheck ./...
        else
          echo "govulncheck not found. Install with: go install golang.org/x/vuln/cmd/govulncheck@latest"
        fi

  ci:
    desc: Run CI pipeline locally (matches GitHub Actions)
    cmds:
      - echo "ðŸš€ Running CI pipeline locally..."
      - task: generate
      - task: deps:verify
      - task: fmt:check
      - task: test
      - task: lint
      - task: security
      - echo "âœ… CI pipeline completed successfully!"

  ci:full:
    desc: Run full CI pipeline with all checks
    cmds:
      - echo "ðŸš€ Running full CI pipeline locally..."
      - task: generate
      - task: deps:verify
      - task: fmt:check
      - task: test:race
      - task: test-coverage
      - task: build:all
      - task: security
      - echo "âœ… Full CI pipeline completed successfully!"

  pre-commit:
    desc: Pre-commit checks
    cmds:
      - task: fmt
      - task: lint
      - task: test
      - echo "âœ… Pre-commit checks passed!"